(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _scene = require('scene/scene');

var _scene2 = _interopRequireDefault(_scene);

var _state = require('state');

var _state2 = _interopRequireDefault(_state);

var _keyboard = require('input/keyboard');

var _keyboard2 = _interopRequireDefault(_keyboard);

var _mouse = require('input/mouse');

var _mouse2 = _interopRequireDefault(_mouse);

var _touch = require('input/touch');

var _touch2 = _interopRequireDefault(_touch);

var _buttons = require('input/buttons');

var _buttons2 = _interopRequireDefault(_buttons);

var _bike = require('input/bike');

var _bike2 = _interopRequireDefault(_bike);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function input(container) {
  (0, _keyboard2.default)(container);
  (0, _mouse2.default)(container);
  (0, _touch2.default)(container);
  (0, _buttons2.default)(container);
  (0, _bike2.default)(container);
}

function init() {
  var container = document.querySelector('#app');
  (0, _state2.default)(container);
  input(container);
  (0, _scene2.default)(container);
}

},{"input/bike":2,"input/buttons":3,"input/keyboard":4,"input/mouse":5,"input/touch":6,"scene/scene":7,"state":9}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _signal = require('signal');

var catcher = void 0;

var bike = void 0;
var parts = void 0;
var partFrontWheel = void 0;
var partRearWheel = void 0;
var partFrame = void 0;
var partFork = void 0;

var active = void 0;

function isActive(target) {
  return target === active;
}

function matchPart(element) {
  var className = element.getAttribute('class');
  return className.match(/bikePart/);
}

function findTarget(event) {
  var target = event.target;

  var element = void 0;
  if (matchPart(target)) element = target;else if (matchPart(target.parentElement)) element = target.parentElement;
  return element;
}

function pickDetail(target) {
  var detail = void 0;
  if (target === partFrontWheel) detail = 1;else if (target === partFork) detail = 2;else if (target === partFrame) detail = 3;else detail = 4;
  return detail;
}

function pickPart(option) {
  var part = void 0;
  if (option === 1) part = partFrontWheel;else if (option === 2) part = partFork;else if (option === 3) part = partFrame;else part = partRearWheel;
  return part;
}

function triggerEvent(target) {
  var detail = pickDetail(target);
  (0, _signal.trigger)(catcher, _signal.names.detail, false, 'UIEvent', { detail: detail });
}

function addClassPart(element, newClassName) {
  var className = element.getAttribute('class');
  element.setAttribute('class', className + ' ' + newClassName);
}

function removeClassPart(element, oldClassName) {
  var regexp = new RegExp('\\s*' + oldClassName, 'g');
  var className = element.getAttribute('class');
  var newClassName = className.replace(regexp, '');
  element.setAttribute('class', newClassName);
}

function deactivatePart() {
  removeClassPart(active, 'bikePart-is-active');
  active = null;
}

function activatePart(detail) {
  var part = pickPart(detail);
  addClassPart(part, 'bikePart-is-active');
  active = part;
}

function activateFirstPart() {
  activatePart(1);
}

function highlightPart(target) {
  bike.classList.add('bike-is-highlighting');
  addClassPart(target, 'bikePart-is-highlighted');
}

function unhighlightPart(target) {
  bike.classList.remove('bike-is-highlighting');
  removeClassPart(target, 'bikePart-is-highlighted');
}

function findParts() {
  bike = catcher.querySelector('#bike');
  partFrontWheel = bike.querySelector('#bikeFrontWheel');
  partRearWheel = bike.querySelector('#bikeRearWheel');
  partFrame = bike.querySelector('#bikeFullFrame');
  partFork = bike.querySelector('#bikeFork');
  parts = [partFrontWheel, partRearWheel, partFrame, partFork];
}

function onPointerDown(event) {
  var target = findTarget(event);
  if (!isActive(target)) triggerEvent(target);
}

function onMouseEnter(event) {
  var target = findTarget(event);
  highlightPart(target);
}

function onMouseLeave(event) {
  var target = findTarget(event);
  unhighlightPart(target);
}

function onSwitched(event) {
  if (event.data.status) activateFirstPart();else deactivatePart();
}

function onDetailPicked(event) {
  if (active) deactivatePart();
  activatePart(event.data.detail);
}

function subscribePart(part) {
  part.addEventListener('click', onPointerDown);
  part.addEventListener('touchstart', onPointerDown);
  part.addEventListener('mouseenter', onMouseEnter);
  part.addEventListener('mouseleave', onMouseLeave);
}

function subscribeParts() {
  parts.forEach(subscribePart);
}

function subscribeEvents() {
  catcher.addEventListener(_signal.names.switched, onSwitched);
  catcher.addEventListener(_signal.names.detailpicked, onDetailPicked);
}

function init(node) {
  catcher = node;
  findParts();
  subscribeParts();
  subscribeEvents();
}

},{"signal":8}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _signal = require('signal');

var stack = [];

var catcher = void 0;

var ui = void 0;
var buttonRotateCCW = void 0;
var buttonRotateCW = void 0;
var buttonZoomIn = void 0;
var buttonZoomOut = void 0;
var buttonTarget = void 0;
var buttonSwitch = void 0;
var buttonFullScreen = void 0;
var buttonHelp = void 0;

function deactivateSwitch() {
  buttonSwitch.classList.remove('buttonSwitch-is-on');
}

function activateSwitch() {
  buttonSwitch.classList.add('buttonSwitch-is-on');
}

function toggleSwitch(status) {
  if (!status) deactivateSwitch();else activateSwitch();
}

function deactivateFullScreen() {
  buttonFullScreen.classList.remove('buttonFullScreen-is-on');
}

function activateFullscreen() {
  buttonFullScreen.classList.add('buttonFullScreen-is-on');
}

function toggleFullScreen(status) {
  if (status) activateFullscreen();else deactivateFullScreen();
}

function hasFeedback(target) {
  return target.classList.contains('button-has-feedback');
}

function updateFeedbackStack() {
  var button = stack.pop();
  button.classList.remove('button-has-feedback');
}

function retriggerFeedback(button) {
  var index = stack.indexOf(button);
  stack.splice(index, 1);
  button.classList.remove('button-has-feedback');
}

function triggerFeedback(button) {
  if (hasFeedback(button)) retriggerFeedback(button);
  button.classList.add('button-has-feedback');
  stack.push(button);
}

function triggerControlFeedback(data) {
  if (data.scale) {
    if (data.distance > 0) triggerFeedback(buttonZoomIn);else triggerFeedback(buttonZoomOut);
  } else if (data.rotate) {
    if (data.distance > 0) triggerFeedback(buttonRotateCCW);else triggerFeedback(buttonRotateCW);
  }
}

function findElements() {
  ui = catcher.querySelector('#ui');
  buttonRotateCCW = ui.querySelector('#buttonRotateCCW');
  buttonRotateCW = ui.querySelector('#buttonRotateCW');
  buttonZoomIn = ui.querySelector('#buttonZoomIn');
  buttonZoomOut = ui.querySelector('#buttonZoomOut');
  buttonTarget = ui.querySelector('#buttonTarget');
  buttonSwitch = ui.querySelector('#buttonSwitch');
  buttonFullScreen = ui.querySelector('#buttonFullScreen');
  buttonHelp = ui.querySelector('#buttonHelp');
}

function onRotateCCWClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.shiftleft, false, 'UIEvent', { rotate: true, oneWay: true });
}

function onRotateCWClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.shiftright, false, 'UIEvent', { rotate: true, oneWay: true });
}

function onZoomInClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.shiftup, false, 'UIEvent', { scale: true, oneWay: true });
}

function onZoomOutClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.shiftdown, false, 'UIEvent', { scale: true, oneWay: true });
}

function onTargetClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.focus, false, 'UIEvent', { oneWay: true });
}

function onSwitchClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.switch, false, 'UIEvent', { oneWay: true });
}

function onFullScreenClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.fullscreen, false, 'UIEvent', { oneWay: true });
}

function onHelpClick(event) {
  event.preventDefault();
  (0, _signal.trigger)(catcher, _signal.names.helpshow, false, 'UIEvent', { oneWay: true });
}

function onShifted(event) {
  if (!event.data.oneWay) triggerControlFeedback(event.data);
}

function onFocused(event) {
  if (!event.data.oneWay) triggerFeedback(buttonTarget);
}

function onSwitched(event) {
  toggleSwitch(event.data.status);
  if (!event.data.oneWay) triggerFeedback(buttonTarget);
}

function onMaximized(event) {
  toggleFullScreen(event.data.status);
  triggerFeedback(buttonFullScreen);
}

function onHelpToggled(event) {
  if (!event.data.oneWay && event.data.status) triggerFeedback(buttonHelp);
}

function onTransition(event) {
  var target = event.target;

  if (hasFeedback(target)) updateFeedbackStack();
}

function subscribeButtons() {
  buttonRotateCCW.addEventListener('click', onRotateCCWClick);
  buttonRotateCW.addEventListener('click', onRotateCWClick);
  buttonZoomIn.addEventListener('click', onZoomInClick);
  buttonZoomOut.addEventListener('click', onZoomOutClick);
  buttonTarget.addEventListener('click', onTargetClick);
  buttonSwitch.addEventListener('click', onSwitchClick);
  buttonFullScreen.addEventListener('click', onFullScreenClick);
  buttonHelp.addEventListener('click', onHelpClick);
}

function subscribeEvents() {
  catcher.addEventListener(_signal.names.shifted, onShifted);
  catcher.addEventListener(_signal.names.focused, onFocused);
  catcher.addEventListener(_signal.names.switched, onSwitched);
  catcher.addEventListener(_signal.names.maximized, onMaximized);
  catcher.addEventListener(_signal.names.helptoggled, onHelpToggled);
  ui.addEventListener('transitionend', onTransition);
}

function init(node) {
  catcher = node;
  findElements();
  subscribeButtons();
  subscribeEvents();
}

},{"signal":8}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _signal = require('signal');

var KEY_CODES = {
  37: _signal.names.shiftleft, // Left
  39: _signal.names.shiftright, // Right
  38: _signal.names.shiftup, // Up
  40: _signal.names.shiftdown, // Down
  33: _signal.names.shiftup, // PageUp
  34: _signal.names.shiftdown, // PageDown
  65: _signal.names.shiftleft, // A
  68: _signal.names.shiftright, // D
  87: _signal.names.shiftup, // W
  83: _signal.names.shiftdown, // S
  32: _signal.names.switch, // Space
  49: _signal.names.detail, // 1
  50: _signal.names.detail, // 2
  51: _signal.names.detail, // 3
  52: _signal.names.detail, // 4
  97: _signal.names.detail, // Num 1
  98: _signal.names.detail, // Num 2
  99: _signal.names.detail, // Num 3
  100: _signal.names.detail // Num 4
}; /* eslint no-multi-spaces: 'off' */

var DETAILS = {
  49: 1,
  50: 2,
  51: 3,
  52: 4,
  97: 1,
  98: 2,
  99: 3,
  100: 4
};

var catcher = void 0;

function hasKey(code) {
  return {}.hasOwnProperty.call(KEY_CODES, code);
}

function hasDetail(mode) {
  return {}.hasOwnProperty.call(DETAILS, mode);
}

function generateEventData(keyCode, shiftKey, ctrlKey) {
  var data = {};
  if (hasDetail(keyCode)) {
    data.detail = DETAILS[keyCode];
  } else {
    data.rotation = shiftKey;
    data.scale = ctrlKey;
  }
  return data;
}

function triggerEvent(event) {
  var keyCode = event.keyCode,
      shiftKey = event.shiftKey,
      ctrlKey = event.ctrlKey;

  var data = generateEventData(keyCode, shiftKey, ctrlKey);
  var name = KEY_CODES[keyCode];
  (0, _signal.trigger)(catcher, name, false, 'UIEvent', data);
}

function onKeyDown(event) {
  event.preventDefault();
  if (hasKey(event.keyCode)) triggerEvent(event);
}

function subscribe() {
  document.addEventListener('keydown', onKeyDown);
}

function init(node) {
  catcher = node;
  subscribe();
}

},{"signal":8}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _signal = require('signal');

var catcher = void 0; /* eslint no-use-before-define: 'off' */

var movePrevious = void 0;
var moveCurrent = void 0;

function savePosition() {
  movePrevious = moveCurrent;
}

function updatePosition(event) {
  moveCurrent = {
    x: event.clientX,
    y: event.clientY
  };
}

function calculateDistance() {
  return {
    x: moveCurrent.x - movePrevious.x,
    y: moveCurrent.y - movePrevious.y
  };
}

function generateMoveEventData() {
  return {
    distance: calculateDistance()
  };
}

function generateHorizontalWheelEvent(delta) {
  return delta > 0 ? _signal.names.shiftleft : _signal.names.shiftright;
}

function generateVerticalWheelEvent(delta) {
  return delta > 0 ? _signal.names.shiftup : _signal.names.shiftdown;
}

function generateWheelEvent(event) {
  var wheelDeltaX = event.wheelDeltaX,
      wheelDeltaY = event.wheelDeltaY,
      wheelDelta = event.wheelDelta,
      shiftKey = event.shiftKey;

  var isHorizontal = shiftKey || Math.abs(wheelDeltaX) > Math.abs(wheelDeltaY);
  return isHorizontal ? generateHorizontalWheelEvent(wheelDelta) : generateVerticalWheelEvent(wheelDelta);
}

function triggerWheelEvent(event) {
  var signal = generateWheelEvent(event);
  (0, _signal.trigger)(catcher, signal, false, 'UIEvent');
}

function triggerMoveEvent() {
  var data = generateMoveEventData();
  (0, _signal.trigger)(catcher, _signal.names.shift, false, 'UIEvent', data);
}

function onWheel(event) {
  requestAnimationFrame(function () {
    triggerWheelEvent(event);
  });
}

function onMouseMove(event) {
  requestAnimationFrame(function () {
    savePosition();
    updatePosition(event);
    triggerMoveEvent();
  });
}

function onMouseUp() {
  unsubscribeMouse();
}

function subscribeMouse() {
  document.addEventListener('mousemove', onMouseMove);
  document.addEventListener('mouseup', onMouseUp);
}

function unsubscribeMouse() {
  document.removeEventListener('mousemove', onMouseMove);
  document.removeEventListener('mouseup', onMouseUp);
}

function onMouseDown(event) {
  updatePosition(event);
  subscribeMouse();
}

function subscribe() {
  catcher.addEventListener('wheel', onWheel);
  catcher.addEventListener('mousedown', onMouseDown);
}

function init(node) {
  catcher = node;
  subscribe();
}

},{"signal":8}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /* eslint no-use-before-define: 'off' */

exports.default = init;

var _signal = require('signal');

var PINCH_THRESHOLD = 25;
var PIXEL_RATIO = window.devicePixelRatio || 1;
var ADJUSTED_PINCH_THRESHOLD = PINCH_THRESHOLD * PIXEL_RATIO;

var catcher = void 0;

var count = 0;

var movePrevious = void 0;
var moveCurrent = void 0;

var spaceStart = void 0;
var spaceCurrent = void 0;

function subtractTouch() {
  count -= 1;
}

function addTouch() {
  count += 1;
}

function savePosition() {
  movePrevious = moveCurrent;
}

function updatePosition(touch) {
  return {
    x: touch.clientX,
    y: touch.clientY
  };
}

function updatePositions(event) {
  moveCurrent = event.touches.map(updatePosition);
}

function calculateDistance() {
  var _moveCurrent = moveCurrent,
      _moveCurrent2 = _slicedToArray(_moveCurrent, 1),
      current = _moveCurrent2[0];

  var _movePrevious = movePrevious,
      _movePrevious2 = _slicedToArray(_movePrevious, 1),
      previous = _movePrevious2[0];

  return {
    x: current.x - previous.x,
    y: current.y - previous.y
  };
}

function calculateSpaceBetween(event) {
  var touches = event.touches;

  var x1 = touches[0].clientX;
  var y1 = touches[0].clientY;
  var x2 = touches[1].clientX;
  var y2 = touches[1].clientY;
  return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
}

function calculateSpaceChange() {
  return spaceCurrent - spaceStart;
}

function generateEvent() {
  var data = {};
  var name = void 0;
  if (count > 1) {
    data.distance = calculateDistance();
    name = _signal.names.shift;
  } else if (spaceStart > ADJUSTED_PINCH_THRESHOLD) {
    data.change = calculateSpaceChange();
    name = _signal.names.pinch;
  } else {
    data.distance = calculateDistance();
    name = _signal.names.drag;
  }
  return { name: name, data: data };
}

function triggerEvent() {
  var signal = generateEvent();
  (0, _signal.trigger)(catcher, signal.name, false, 'UIEvent', signal.data);
}

function onTouchMove(event) {
  requestAnimationFrame(function () {
    savePosition();
    if (count > 1 && spaceStart > ADJUSTED_PINCH_THRESHOLD) spaceCurrent = calculateSpaceBetween(event);else updatePositions(event);
    triggerEvent();
  });
}

function onTouchEnd() {
  subtractTouch();
  if (!count) unsubscribeTouch();
}

function subscribeTouch() {
  document.addEventListener('touchmove', onTouchMove);
  document.addEventListener('touchend', onTouchEnd);
}

function unsubscribeTouch() {
  document.removeEventListener('touchmove', onTouchMove);
  document.removeEventListener('touchend', onTouchEnd);
}

function onTouchStart(event) {
  unsubscribeTouch();
  updatePositions(event);
  if (!count) subscribeTouch();
  if (count > 1) spaceStart = calculateSpaceBetween(event);
  addTouch();
}

function subscribe() {
  catcher.addEventListener('touchstart', onTouchStart);
}

function init(node) {
  catcher = node;
  subscribe();
}

},{"signal":8}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;
function init() {
  console.log('init scene');
}

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.trigger = trigger;
var names = exports.names = {
  shiftleft: 'bbb:shiftleft',
  shiftright: 'bbb:shiftright',
  shiftup: 'bbb:shiftup',
  shiftdown: 'bbb:shiftdown',
  shift: 'bbb:shift',
  shifted: 'bbb:shifted',
  drag: 'bbb:drag',
  pinch: 'bbb:pinch',
  switch: 'bbb:switch',
  switched: 'bbb:switched',
  detail: 'bbb:detail',
  detailpicked: 'bbb:detailpicked',
  focus: 'bbb:focus',
  focused: 'bbb:focused',
  fullscreen: 'bbb:fullscreen',
  maximized: 'bbb:maximized',
  help: 'bbb:help',
  helptoggled: 'bbb:helptoggled'
};

function setData(event, data) {
  var newEvent = event;
  newEvent.data = data;
  return newEvent;
}

function triggerCreateEvent(object, eventName, propagate, eventType, data) {
  var event = document.createEvent(eventType);
  if (data) setData(event, data);
  event.initEvent(eventName, propagate, false);
  object.dispatchEvent(event);
}

function triggerCreateEventObject(object, eventName, propagate, data) {
  var event = document.createEventObject();
  if (data) setData(event, data);
  object.fireEvent('on' + eventName, event);
}

function trigger(object, eventName) {
  var propagate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var eventType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'UIEvent';
  var data = arguments[4];

  if (document.createEvent) {
    triggerCreateEvent(object, eventName, propagate, eventType, data);
  } else {
    triggerCreateEventObject(object, eventName, propagate, data);
  }
}

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;

var _signal = require('signal');

var catcher = void 0;

var switched = false;
var maximized = false;

function toggleSwitch() {
  switched = !switched;
}

function exitFullScreen() {
  document.webkitCancelFullScreen();
}

function enterFullScreen() {
  document.documentElement.webkitRequestFullScreen();
}

function toggleFullScreen() {
  if (maximized) exitFullScreen();else enterFullScreen();
}

function triggerFeedbackEvent(name) {
  var originalData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var additionalData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var data = Object.assign({}, originalData, additionalData);
  (0, _signal.trigger)(catcher, name, false, 'UIEvent', data);
}

function onShift(event) {
  triggerFeedbackEvent(_signal.names.shifted, event.data);
}

function onSwitch(event) {
  toggleSwitch();
  triggerFeedbackEvent(_signal.names.switched, event.data, { status: switched });
}

function onDetail(event) {
  if (!switched) onSwitch(event);
  triggerFeedbackEvent(_signal.names.detailpicked, event.data);
}

function onFocus(event) {
  triggerFeedbackEvent(_signal.names.focused, event.data);
}

function onFullScreen() {
  toggleFullScreen();
}

function onHelp(event) {
  triggerFeedbackEvent(_signal.names.helptoggled, event.data);
}

function onFullScreenChange() {
  maximized = document.webkitIsFullScreen;
  triggerFeedbackEvent(_signal.names.maximized, {}, { status: maximized });
}

function subscribe() {
  catcher.addEventListener(_signal.names.shiftleft, onShift);
  catcher.addEventListener(_signal.names.shiftright, onShift);
  catcher.addEventListener(_signal.names.shiftup, onShift);
  catcher.addEventListener(_signal.names.shiftdown, onShift);
  catcher.addEventListener(_signal.names.shift, onShift);
  catcher.addEventListener(_signal.names.drag, onShift);
  catcher.addEventListener(_signal.names.pinch, onShift);
  catcher.addEventListener(_signal.names.switch, onSwitch);
  catcher.addEventListener(_signal.names.detail, onDetail);
  catcher.addEventListener(_signal.names.focus, onFocus);
  catcher.addEventListener(_signal.names.fullscreen, onFullScreen);
  catcher.addEventListener(_signal.names.help, onHelp);
  document.addEventListener('webkitfullscreenchange', onFullScreenChange);
}

function init(node) {
  catcher = node;
  subscribe();
}

},{"signal":8}],10:[function(require,module,exports){
'use strict';

var _app = require('app');

var _app2 = _interopRequireDefault(_app);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _app2.default)();

},{"app":1}]},{},[10]);
